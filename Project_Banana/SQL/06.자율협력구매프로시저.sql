-- ■■■■■ 자율협력구매 프로시저 ■■■■■■-

--===================================================================================================================================

-- ① 자율협력 구매 신청 시 프로시저
-- 1. 포인트 내역 등록 INSERT
-- 2. 자율협력구매 신청 INSERT



ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';

-- ○ 테스트 완료 (1.포인트 리스트 출금상태 0,포인트 리스트 코드 참조)
EXEC PRC_J_APPLY('USER10',-10000,'J_POST2',10);
EXEC PRC_J_APPLY('USER11',-20000,'J_POST2',20);
-- J_APPLY1	J_POST2	USER10	2020-07-14 18:55:01	10	POLIS23

SELECT *
FROM J_APPLY;
--==>J_APPLY1	J_POST2	USER10	2020-07-14 18:55:01	10	POLIS23
--==>J_APPLY2	J_POST2	USER11	2020-07-14 19:00:06	20	POLIS33

SELECT *
FROM POINT_LIST;
--==>POLIS23	USER10	-10000	2020-07-14 18:55:01	0
--==>POLIS33	USER11	-20000	2020-07-14 19:00:06	0


-- 포인트 리스트 업데이트
UPDATE  POINT_LIST
SET POINT=-10000
WHERE POINT_LIST_CODE ='POLIS23';
--==>POLIS23	USER10	10000	2020-07-14 18:55:01	0

UPDATE  POINT_LIST
SET SDATE = TO_DATE('2020-07-14 19:00:06','YYYY-MM-DD HH24:MI:SS')
WHERE POINT_LIST_CODE ='POLIS33';
--==>POLIS23	USER10	10000	2020-07-14 18:55:01	

-- 자율협력구매 신청 날짜 업데이트
UPDATE  J_APPLY
SET SDATE = TO_DATE('2020-07-14 19:00:06','YYYY-MM-DD HH24:MI:SS')
WHERE J_APPLY_CODE ='J_APPLY2';

-- 자율협력 구매 신청 시 프로시저
CREATE OR REPLACE PROCEDURE PRC_J_APPLY
(
 V_B_USER_CODE          IN B_USER.B_USER_CODE%TYPE -- 유저코드
, V_POINT               IN POINT_LIST.POINT%TYPE   -- 포인트
, V_J_POST_CODE         IN J_POST.J_POST_CODE%TYPE -- 자율협력구매 게시물 등록 코드
, V_AMOUNT              IN J_APPLY.AMOUNT%TYPE     -- 주문 수량
)
IS
V_POINT_LIST_CODE   POINT_LIST.POINT_LIST_CODE%TYPE := 'POLIS' || SEQ_POINT_LIST.NEXTVAL;-- PL1

BEGIN
-- 실행문
-- 1. 포인트 내역 등록 INSERT
INSERT INTO POINT_LIST(POINT_LIST_CODE, B_USER_CODE, POINT)
VALUES(V_POINT_LIST_CODE, V_B_USER_CODE, V_POINT);

-- 2. 자율협력구매 신청 INSERT
INSERT INTO J_APPLY(J_APPLY_CODE, J_POST_CODE, B_USER_CODE, AMOUNT,POINT_LIST_CODE)
VALUES('J_APPLY'||SEQ_J_APPLY.NEXTVAL, V_J_POST_CODE, V_B_USER_CODE, V_AMOUNT, V_POINT_LIST_CODE);

-- 3. 커밋
-- COMMIT;
END;

--===========================================================================================================
-- ② 가격 하락 시 가격 하락 넣고 전체 환불 프로시저 
-- 1. 포인트 내역 등록 
CREATE OR REPLACE PROCEDURE PRC_J_COST_DROP_REFUND
(
    V_J_POST_CODE   IN J_POST.J_POST_CODE%TYPE      -- 게시물 코드
    ,V_DROP_COST     IN J_COST_DROP.DROP_COST%TYPE

)
IS
    -- 변수 선언
    V_B_USER_CODE   B_USER.B_USER_CODE%TYPE;
    V_POINT         POINT_LIST.POINT%TYPE;

    -- 커서 선언
    CURSOR CUR_REFUND_USER              -- 환불 받을 유저, 가격
    IS
    SELECT A.B_USER_CODE, P.POINT
    FROM J_APPLY A LEFT JOIN POINT_LIST P
    ON  A.POINT_LIST_CODE = P.POINT_LIST_CODE
    WHERE A.J_POST_CODE = V_J_POST_CODE;

BEGIN

    -- 가격 하락 INSERT
    INSERT INTO J_COST_DROP(J_COST_DROP_CODE, J_POST_CODE, DROP_COST)
    VALUES('J_COSDR'|| SEQ_J_COST_DROP.NEXTVAL,V_J_POST_CODE,V_DROP_COST);


    -- 커서 오픈
    OPEN CUR_REFUND_USER;
    
    -- 커서 오픈 후 데이터 처리
    LOOP
        
        -- 한행 한행 받아다가 처리
        FETCH CUR_REFUND_USER INTO V_B_USER_CODE, V_POINT;
        
        -- 커서에서 더이상 데이터가 쏟아져 나오지 않음
        EXIT WHEN CUR_REFUND_USER%NOTFOUND;          

        
        -- 포인트 환불 처리
        INSERT INTO POINT_LIST(POINT_LIST_CODE, B_USER_CODE, POINT)
        VALUES('POLIS'|| SEQ_POINT_LIST.NEXTVAL,V_B_USER_CODE,-V_POINT);
                
         
    
    END LOOP;
    
    -- 커서 클로즈
    CLOSE CUR_REFUND_USER;
    
END;

-- ○ 테스트
EXEC PRC_J_COST_DROP_REFUND('J_POST2',90000);
/*
POLIS45	USER10	10000	2020-07-14 02:32:38	0
POLIS46	USER11	20000	2020-07-14 02:32:38	0

*/

SELECT *
FROM POINT_LIST;

SELECT *
FROM J_COST_DROP;

-- 확인
UPDATE POINT_LIST
SET POINT = 0
WHERE POINT_LIST_CODE ='POLIS38';

--==============================================================================================================
-- ③ 주문 수량 재입력
--1.포인트 내역 등록 2.재입력 insert 

-- 테스트
EXEC PRC_J_REAPPLY('USER10',9000,'J_COSDR1',10);

-- 더미 데이트 확인
-- 1. 포인트 리스트에 잘 찍혔나
SELECT *
FROM POINT_LIST;
-- POLIS49	USER10	9000	2020-07-14 02:54:22	0
-- 주문 완료

-- 2. 가격 하락 테이블에 찍혔나.
SELECT *
FROM J_COST_DROP;
--J_COSDR1	J_POST2	2020-07-14 02:47:46	90000

-- 3. 재주문 완료인가.
SELECT *
FROM J_REAPPLY;
--==>J_REAP1	J_COSDR1	USER10	POLIS49	10	2020-07-14 02:54:22



CREATE OR REPLACE PROCEDURE PRC_J_REAPPLY
(
 V_B_USER_CODE          IN B_USER.B_USER_CODE%TYPE -- 유저코드
,V_POINT                IN POINT_LIST.POINT%TYPE    -- 구매한 가격
,V_J_COST_DROP_CODE     IN J_COST_DROP.J_COST_DROP_CODE%TYPE -- 하락 코드
, V_RE_AMOUNT             IN J_REAPPLY.RE_AMOUNT%TYPE-- 재주문 수량
)
IS

    V_POINT_LIST_CODE   POINT_LIST.POINT_LIST_CODE%TYPE :='POLIS'|| SEQ_POINT_LIST.NEXTVAL;

BEGIN

    -- 1. 포인트 내역 등록 - 구매 가격
    INSERT INTO POINT_LIST(POINT_LIST_CODE, B_USER_CODE, POINT)
    VALUES(V_POINT_LIST_CODE, V_B_USER_CODE,V_POINT );
    
    -- 2. 주문 재입력 INSERT
    INSERT INTO J_REAPPLY(J_REAPPLY_CODE, J_COST_DROP_CODE, B_USER_CODE, POINT_LIST_CODE, RE_AMOUNT)
    VALUES('J_REAP'||SEQ_J_REAPPLY.NEXTVAL,V_J_COST_DROP_CODE, V_B_USER_CODE, V_POINT_LIST_CODE,V_RE_AMOUNT );
    
    
    -- 커밋
    --COMMIT;

END;



--======================================================================================================
-- ④ 자율협력구매 성사 시 프로시저
-- 1. 가격 하락 체크
-- 2. 포인트내역 등록 INSERT(제안자 + 상태1)
-- 3. 거래성사 INSERT
SELECT *
FROM J_POST;

-- 테스트
EXEC PRC_J_SUCCESS('USER17','J_POST2');

SELECT *
FROM POINT_LIST;
--==>POLIS50	USER17	90000	2020-07-14 03:19:41	1 하락된 가격으로 들어감 1인 상태

SELECT *
FROM J_SUCCESS;
--==> J_SUCCESS 1	J_POST2	POLIS50	2020-07-14 03:19:41 소상공인에게 돈이 1인 상태로 들어간 것


CREATE OR REPLACE PROCEDURE PRC_J_SUCCESS
(
  V_B_USER_CODE            IN B_USER.B_USER_CODE%TYPE -- 소상공인 
, V_J_POST_CODE         IN J_POST.J_POST_CODE%TYPE  -- 자율협력 게시물 등록 코드
)
IS
    V_POINT_LIST_CODE   POINT_LIST.POINT_LIST_CODE%TYPE := 'POLIS' || SEQ_POINT_LIST.NEXTVAL;-- PL1
    V_POINT             POINT_LIST.POINT%TYPE;
    V_CHECK             NUMBER;
BEGIN

    
    -- 가격 하락했는지 여부 체크 1이면 하락
    SELECT COUNT(*) INTO V_CHECK
    FROM J_COST_DROP
    WHERE J_POST_CODE = V_J_POST_CODE;
    
    -- ◎ 가격 하락 했을 경우
    IF(V_CHECK = 1)
    THEN         
    
    
    --  하락된 가격 입력
    SELECT DROP_COST INTO V_POINT
    FROM J_COST_DROP
    WHERE J_POST_CODE = V_J_POST_CODE;
    
    -- 1. 포인트내역 등록 INSERT(제안자 + 상태1)
    INSERT INTO POINT_LIST(POINT_LIST_CODE, B_USER_CODE, POINT, STATE)
    VALUES (V_POINT_LIST_CODE, V_B_USER_CODE, V_POINT, 1);
    
    -- 2. 거래성사 INSERT
    INSERT INTO J_SUCCESS(J_SUCCESS_CODE, J_POST_CODE, POINT_LIST_CODE)
    VALUES('J_SUCCESS'||SEQ_J_SUCCESS.NEXTVAL, V_J_POST_CODE, V_POINT_LIST_CODE);
    
    
    
    ---- ◎가격 하락하지 않았을 경우
    ELSE
    
    -- 기존 가격 입력
    SELECT DIS_COST INTO V_POINT
    FROM J_POST
    WHERE J_POST_CODE = V_J_POST_CODE;
    
    -- 1. 포인트내역 등록 INSERT(제안자 + 상태1)
    INSERT INTO POINT_LIST(POINT_LIST_CODE, B_USER_CODE, POINT, STATE)
    VALUES (V_POINT_LIST_CODE, V_B_USER_CODE, V_POINT, 1);
    
    -- 2. 거래성사 INSERT
    INSERT INTO J_SUCCESS(J_SUCCESS_CODE, J_POST_CODE, POINT_LIST_CODE)
    VALUES('J_SUCCESS'||SEQ_J_SUCCESS.NEXTVAL, V_J_POST_CODE, V_POINT_LIST_CODE);
    
    
    END IF;
   
    -- 3. 커밋
    -- COMMIT
END;

--===================================================================================================================================

-- ⑤ 자율협력구매 거래 신고 처리 프로시저(유효한 신고일때)
-- 1
--
SELECT *
FROM DEAL_REPORT_PROC_TYPE;

-- 거래 신고 처리 
INSERT INTO J_DEAL_REPORT(J_DEAL_REPORT_CODE, J_SUCCESS_CODE, G_DEAL_REPORT_TYPE_CODE,F_FILE, CONTENT, DEAL_REPORTER_TYPE_CODE)
VALUES('J_DRP'||SEQ_J_D_REP.NEXTVAL,'J_SUCCESS 1','GDERT3','FILE.pdf','접시가 완전 달라요 어이가 없네요.','DREPO4');


SELECT *
FROM J_SUCCESS;

SELECT *
FROM G_DEAL_REPORT_TYPE;

SELECT *
FROM DEAL_REPORTER_TYPE;

SELECT *
FROM J_DEAL_REPORT;

DESC J_DEAL_REPORT;
/*
----------------------- -------- -------------- 
J_DEAL_REPORT_CODE      NOT NULL VARCHAR2(20)   
J_SUCCESS_CODE          NOT NULL VARCHAR2(20)   
G_DEAL_REPORT_TYPE_CODE NOT NULL VARCHAR2(20)   
SDATE                   NOT NULL DATE           
F_FILE                  NOT NULL VARCHAR2(4000) 
CONTENT                 NOT NULL VARCHAR2(4000) 
DEAL_REPORTER_TYPE_CODE NOT NULL VARCHAR2(20)   
*/

SELECT *
FROM DEAL_REPORT_PROC_TYPE;


EXEC PRC_J_DEAL_REPORT_PROC('USER11','USER17','J_DRP1','ADMIN1','DRPT6','DRPT7','신고가 처리 되었습니다. 불편을 드려 죄송합니다.');

CREATE OR REPLACE PROCEDURE PRC_J_DEAL_REPORT_PROC
(
  V_B_USER_CODE             IN     B_USER.B_USER_CODE%TYPE   -- 신고자유저코드
, V_B_USER_REP_CODE             IN     B_USER.B_USER_CODE%TYPE   -- 신고당한사람유저코드
, V_J_DEAL_REPORT_CODE      IN      J_DEAL_REPORT.J_DEAL_REPORT_CODE%TYPE -- 자율협력구매 거래 신고 코드
, V_ADMIN_CODE             IN          ADMIN.ADMIN_CODE%TYPE -- 관리자 등록 코드
, V_DEAL_REPORT_PROC_TYPE_CODE  IN     DEAL_REPORT_PROC_TYPE.DEAL_REPORT_PROC_TYPE_CODE%TYPE    -- 신고자에 대한 거래 신고처리 유형 코드
, V_DEAL_REPORT_PROC_TYPE_CODE2  IN     DEAL_REPORT_PROC_TYPE.DEAL_REPORT_PROC_TYPE_CODE%TYPE    -- 신고대상자에 대한 거래 신고처리 유형 코드
, V_ANSWER                      IN      J_DEAL_REPORT_PROC.ANSWER%TYPE  -- 신고답변

)
IS
 V_OUT_CODE            OUT.OUT_CODE%TYPE := 'OUT' ||SEQ_OUT.NEXTVAL;

BEGIN
    
    
    IF(V_DEAL_REPORT_PROC_TYPE_CODE ='DRPT9')
    THEN
    
        INSERT INTO J_DEAL_REPORT_PROC(J_DEAL_REPORT_PROC_CODE, J_DEAL_REPORT_CODE, ADMIN_CODE, DEAL_REPORT_PROC_TYPE_CODE, ANSWER)
        VALUES('J_DRP' || SEQ_J_D_REP_PRC.NEXTVAL,V_J_DEAL_REPORT_CODE,V_ADMIN_CODE, V_DEAL_REPORT_PROC_TYPE_CODE, V_ANSWER);
    
    ELSE
    
        -- 1) 아웃 내역 등록 INSERT(신고 대상자)
        INSERT INTO OUT(OUT_CODE,B_USER_CODE)
        VALUES(V_OUT_CODE, V_B_USER_REP_CODE);
        
        -- 2) 신고자 신고 처리 INSERT  -- 환불시간 처리 시간 디폴트
        INSERT INTO J_DEAL_REPORT_PROC(J_DEAL_REPORT_PROC_CODE, J_DEAL_REPORT_CODE, ADMIN_CODE, DEAL_REPORT_PROC_TYPE_CODE, ANSWER)
        VALUES('J_DRP' || SEQ_J_D_REP_PRC.NEXTVAL,V_J_DEAL_REPORT_CODE,V_ADMIN_CODE, V_DEAL_REPORT_PROC_TYPE_CODE, V_ANSWER);
        
        -- 3) 신고자대상자 신고 처리 INSERT  -- 환불시간 처리 시간 디폴트
        INSERT INTO J_DEAL_REPORT_PROC(J_DEAL_REPORT_PROC_CODE, J_DEAL_REPORT_CODE, ADMIN_CODE, DEAL_REPORT_PROC_TYPE_CODE, ANSWER, OUT_CODE)
        VALUES('J_DRP' || SEQ_J_D_REP_PRC.NEXTVAL,V_J_DEAL_REPORT_CODE,V_ADMIN_CODE, V_DEAL_REPORT_PROC_TYPE_CODE2, V_ANSWER, V_OUT_CODE);      
    
    END IF;
    
   
    -- 4) 커밋
    -- COMMIT;
    
END;

SELECT *
FROM OUT;

SELECT *
FROM J_DEAL_REPORT_PROC;
--====================================================================================================

-- ⑥ 자율협력구매 리뷰 등록 프로시저
-- 1. 신뢰도 점수 내역 insert
-- 2. 바나나 점수 내역 insert
-- 3. 공통협구매 리뷰 등록

-- 테스트
SELECT *
FROM J_REAPPLY;

EXEC PRC_J_REVIEW(5,'USER10','J_SUCCESS 1','역시 독일제여서 장난 아니네요 떨어져도 안깨져요^^');

-- 데이터 확인
SELECT *
FROM J_REVIEW;
--==>J_REV2	J_SUCCESS 1	2020-07-14 03:32:26	5	역시 독일제여서 장난 아니네요 떨어져도 안깨져요^^	BANA10	BRIX7

SELECT *
FROM BANANA_SCORE;
--==>BANA10	USER10	20	2020-07-14 03:32:26

SELECT *
FROM CREDIT_SCORE;
--==>BRIX7	5	2020-07-14 03:32:26	USER10


CREATE OR REPLACE PROCEDURE PRC_J_REVIEW
(
 V_CREDIT_SCORE 		    IN 	CREDIT_SCORE.CREDIT_SCORE%TYPE	--신뢰도점수
,V_B_USER_CODE		    IN        B_USER.B_USER_CODE%TYPE -- 유저코드
,V_J_SUCCESS_CODE       IN      J_SUCCESS.J_SUCCESS_CODE%TYPE -- 자율협력구매 성사 코드
,V_CONTENT			    IN      J_REVIEW.CONTENT%TYPE -- 리뷰내용
)
IS
	-- 변수 선언
V_CREDIT_SCORE_CODE		CREDIT_SCORE.CREDIT_SCORE_CODE%TYPE := 'BRIX' || SEQ_BRIX.NEXTVAL;-- CS1
V_BANANA_SCORE_CODE 	BANANA_SCORE.BANANA_SCORE_CODE%TYPE := 'BANA' || SEQ_BANANA.NEXTVAL;--BS1

BEGIN
	-- 실행문
	-- 1. 신뢰도 점수 내역 INSERT
	INSERT INTO CREDIT_SCORE(CREDIT_SCORE_CODE, CREDIT_SCORE, B_USER_CODE)
    VALUES(V_CREDIT_SCORE_CODE, V_CREDIT_SCORE, V_B_USER_CODE);

    --2. 바나나점수 내역 INSERT
	INSERT INTO BANANA_SCORE(BANANA_SCORE_CODE, B_USER_CODE, BANANA_SCORE)
	VALUES (V_BANANA_SCORE_CODE, V_B_USER_CODE, 20);

	--3. 자율협력구매 리뷰 등록 INSERT
	INSERT INTO J_REVIEW(J_REVIEW_CODE, J_SUCCESS_CODE, SCORE, CONTENT, BANANA_SCORE_CODE, CREDIT_SCORE_CODE)
	VALUES( 'J_REV' || SEQ_J_REVIEW.NEXTVAL, V_J_SUCCESS_CODE, V_CREDIT_SCORE, V_CONTENT,V_BANANA_SCORE_CODE, V_CREDIT_SCORE_CODE);

	--4. 커밋
	--COMMIT;
END;




--------------------------------------------------------------------------------------------------
-- 자율 협력 구매 상품반환
-- 1. 포인트리스트내역 INSERT (제안자 - , 참여자 +)
-- 2. 자율협력 상품 반환 
SELECT *
FROM J_DEAL_REPORT_PROC;

CREATE OR REPLACE PROCEDURE PRC_J_RETURN_ITEM
( V_B_USER_CODE IN B_USER.B_USER_CODE%TYPE      -- 공구원 코드
, V_BB_USER_CODE IN B_USER.B_USER_CODE%TYPE      -- 공구장 코드
, V_POINT IN POINT_LIST.POINT%TYPE -- 공구원 돌려줘야하는 포인트 것
, V_J_DEAL_REPORT_PROC_CODE IN J_DEAL_REPORT_PROC.J_DEAL_REPORT_PROC_CODE%TYPE -- 거래 신고 처리
, V_REFUND_DATE IN J_RETURN_ITEM.REFUND_DATE%TYPE
)
IS
  V_POINT_LIST_CODE   POINT_LIST.POINT_LIST_CODE%TYPE;
  V_J_POST_CHECK   NUMBER;
  V_J_POST_CODE     J_POST.J_POST_CODE%TYPE;
  DROP_CHECK   J_POST.J_POST_CODE%TYPE;
BEGIN
  
  -- 변수 생성 및 포인트 리스트 시퀀스 생성 후 저장 
   V_POINT_LIST_CODE := 'POLIS'||SEQ_POINT_LIST.NEXTVAL;
   
   

  -- 공구원에게 돌려주는 것포인트 리스트 내역 INSERT
  INSERT INTO POINT_LIST(POINT_LIST_CODE, B_USER_CODE, POINT)
  VALUES(V_POINT_LIST_CODE, V_BB_USER_CODE, V_POINT);
  
  -- 공구장에게 회수하는 포인트 리스트 내역 INSERT
  INSERT INTO POINT_LIST(POINT_LIST_CODE, B_USER_CODE, POINT)
  VALUES('POLIS' || SEQ_POINT_LIST.NEXTVAL, V_BB_USER_CODE, - V_POINT);
                        
-- 자율협력공동구매 INSERT

-- 1. 자율협력구매 게시물 등록코드를 V_J_POST_CODE 담음 
    SELECT P.J_POST_CODE INTO V_J_POST_CODE 
    FROM J_APPLY A LEFT JOIN J_POST P
        ON A.J_POST_CODE = P.J_POST_CODE
        LEFT  JOIN J_REAPPLY R
        ON R.B_USER_CODE = P.B_USER_CODE
        LEFT JOIN J_SUCCESS S
        ON S.J_POST_CODE = P.J_POST_CODE
        LEFT JOIN J_DEAL_REPORT D
        ON D.J_SUCCESS_CODE = S.J_SUCCESS_CODE
        LEFT JOIN J_DEAL_REPORT_PROC O
        ON O.J_DEAL_REPORT_CODE = D.J_DEAL_REPORT_CODE
        LEFT JOIN J_RETURN_ITEM I
        ON I.J_DEAL_REPORT_PROC_CODE = O.J_DEAL_REPORT_PROC_CODE
    WHERE A.B_USER_CODE=V_B_USER_CODE;
    
    --받아온 게시물 코드가 가격 하락 테이블에 존재하는지를 체크하여 DROP_CHECK 에 담음
    SELECT J_COST_DROP_CODE INTO DROP_CHECK
    FROM J_COST_DROP
    WHERE J_POST_CODE = V_J_POST_CODE;
    
    IF(DROP_CHECK IS NULL)
   THEN V_J_POST_CHECK :=0; -- 가격 하락이 없는 경우
   ELSE 
   V_J_POST_CHECK :=1;  --가격 하락이 있는 경우
   END IF;
   
   
   IF(V_J_POST_CHECK=0)
  THEN
      INSERT INTO 
        ( SELECT  I.J_RETURN_ITEM_CODE, I.J_DEAL_REPORT_PROC_CODE,I.POINT_LIST_CODE,I.REFUND_DATE
        FROM J_APPLY A LEFT JOIN J_POST P
        ON A.J_POST_CODE = P.J_POST_CODE
        LEFT  JOIN J_REAPPLY R
        ON R.B_USER_CODE = P.B_USER_CODE
        LEFT JOIN J_SUCCESS S
        ON S.J_POST_CODE = P.J_POST_CODE
        LEFT JOIN J_DEAL_REPORT D
        ON D.J_SUCCESS_CODE = S.J_SUCCESS_CODE
        LEFT JOIN J_DEAL_REPORT_PROC O
        ON O.J_DEAL_REPORT_CODE = D.J_DEAL_REPORT_CODE
        LEFT JOIN J_RETURN_ITEM I
        ON I.J_DEAL_REPORT_PROC_CODE = O.J_DEAL_REPORT_PROC_CODE
        WHERE A.B_USER_CODE=V_B_USER_CODE)
    VALUES('J_RETI'||SEQ_J_RETURN_ITEM.NEXTVAL, V_J_DEAL_REPORT_PROC_CODE, V_POINT_LIST_CODE, V_REFUND_DATE);    
    
ELSE 
  INSERT INTO 
        ( SELECT  I.J_RETURN_ITEM_CODE, I.J_DEAL_REPORT_PROC_CODE,I.POINT_LIST_CODE,I.REFUND_DATE
        FROM J_APPLY A LEFT JOIN J_POST P
        ON A.J_POST_CODE = P.J_POST_CODE
        LEFT  JOIN J_REAPPLY R
        ON R.B_USER_CODE = P.B_USER_CODE
        LEFT JOIN J_SUCCESS S
        ON S.J_POST_CODE = P.J_POST_CODE
        LEFT JOIN J_DEAL_REPORT D
        ON D.J_SUCCESS_CODE = S.J_SUCCESS_CODE
        LEFT JOIN J_DEAL_REPORT_PROC O
        ON O.J_DEAL_REPORT_CODE = D.J_DEAL_REPORT_CODE
        LEFT JOIN J_RETURN_ITEM I
        ON I.J_DEAL_REPORT_PROC_CODE = O.J_DEAL_REPORT_PROC_CODE
        WHERE R.B_USER_CODE=V_B_USER_CODE)
    VALUES('J_RETI'||SEQ_J_RETURN_ITEM.NEXTVAL, V_J_DEAL_REPORT_PROC_CODE, V_POINT_LIST_CODE, V_REFUND_DATE);   
END IF;

--COMMIT;

END;

SELECT *
FROM PNR_REPORT_PROC_TYPE;
--============================================================================================================
-- ⑧ 자율협력구매 게시물 신고 처리
-- 1) 경고내역등록 INSERT 
-- 2) 자율협력구매 게시물 신고 처리 INSERT

-- 게시물 신고하기 INSERT 
INSERT INTO J_POST_REPORT(J_POST_REPORT_CODE, J_POST_CODE, POST_REPORT_TYPE_CODE, B_USER_CODE)
VALUES('J_PRP'||SEQ_J_POST_REP_PRC.NEXTVAL,'J_POST3','POSRT6','USER11');



-- 유저 확인
SELECT *
FROM B_USER B LEFT JOIN JOIN J
ON B.B_USER_CODE = J.B_USER_CODE;


-- 신고 타입
SELECT *
FROM POST_REPORT_TYPE;

-- 게시물 신고
SELECT *
FROM J_POST_REPORT;

-- 게시물 신고 처리
SELECT *
FROM J_POST_REPORT_PROC;

-- 게시물 코드 확인
SELECT *
FROM J_POST;

-- 게시물 댓글 
SELECT *
FROM PNR_REPORT_PROC_TYPE;

-- 게시물 댓글 
SELECT *
FROM WARNING;


-- 경고 내역 확인
SELECT *
FROM WARNING W RIGHT JOIN J_POST_REPORT_PROC J
ON W.WARNING_CODE = J.WARNING_CODE ;

-- 확인
EXEC PRC_J_POST_REPORT_PROC('J_PRP1','ADMIN1','PNRP1');

CREATE OR REPLACE PROCEDURE PRC_J_POST_REPORT_PROC
( 
V_J_POST_REPORT_CODE     IN  J_POST_REPORT.J_POST_REPORT_CODE%TYPE-- 자율협력구매 게시물 신고 코드
,V_ADMIN_CODE             IN          ADMIN.ADMIN_CODE%TYPE-- 관리자 등록 코드
,V_PNR_REPORT_PROC_TYPE_CODE     IN    PNR_REPORT_PROC_TYPE.PNR_REPORT_PROC_TYPE_CODE%TYPE--게시물/댓글 신고처리 유형 코드 0 일때 유효한 신고
)
IS
V_J_POST_CODE       J_POST.J_POST_CODE%TYPE;    
V_WARNING_CODE      WARNING.WARNING_CODE%TYPE;
V_B_USER_CODE       B_USER.B_USER_CODE%TYPE;    -- 신고자당한사람 유저코드

BEGIN

        -- 1. 신고당한 게시물 번호 얻어내기
        SELECT J_POST_CODE INTO V_J_POST_CODE 
        FROM J_POST_REPORT
        WHERE J_POST_REPORT_CODE = V_J_POST_REPORT_CODE;
        
        -- 2. 신고당한 게시물에 사용자 식별 코드 얻어내기        
        SELECT B_USER_CODE INTO V_B_USER_CODE
        FROM J_POST
        WHERE J_POST_CODE = V_J_POST_CODE;


        -- 유효한 신고일 경우
        IF(V_PNR_REPORT_PROC_TYPE_CODE = 'PNRP1')
        THEN
        
           V_WARNING_CODE := 'WAR' || SEQ_WAR.NEXTVAL;  -- WAR1
            
            -- 1) 경고내역 등록 INSERT
            INSERT INTO WARNING (WARNING_CODE, B_USER_CODE)
            VALUES (V_WARNING_CODE, V_B_USER_CODE);
         
            -- 2) 자율협력구매 게시물 신고 처리 INSERT
            INSERT INTO J_POST_REPORT_PROC(J_POST_REPORT_PROC_CODE, J_POST_REPORT_CODE, ADMIN_CODE, PNR_REPORT_PROC_TYPE_CODE, WARNING_CODE)
            VALUES('J_PRPP'|| SEQ_J_POST_REP_PRC.NEXTVAL, V_J_POST_REPORT_CODE, V_ADMIN_CODE, V_PNR_REPORT_PROC_TYPE_CODE, V_WARNING_CODE);
        -- 유효하지 않은 신고일 경우
        ELSE         
          
          -- 1) 자율협력구매 게시물 신고 처리 INSERT
         INSERT INTO J_POST_REPORT_PROC(J_POST_REPORT_PROC_CODE, J_POST_REPORT_CODE, ADMIN_CODE, PNR_REPORT_PROC_TYPE_CODE)
         VALUES('J_PRPP'|| SEQ_J_POST_REP_PRC.NEXTVAL, V_J_POST_REPORT_CODE, V_ADMIN_CODE, V_PNR_REPORT_PROC_TYPE_CODE);
        
        
        END IF;

    -- 3) 커밋
    -- COMMIT;

END;


--======================================================================================================
-- ⑨ 자율협력 구매 댓글 신고 처리 시 프로시저
-- 1. 경고 내역 등록 INSERT
-- 2. 댓글 신고 처리 INSERT

-- 더미 댓글
INSERT INTO J_REPLY(J_REPLY_CODE, J_POST_CODE, B_USER_CODE, L_LEVEL, REPLY)
VALUES('J_REP'||SEQ_J_REPLY.NEXTVAL,'J_POST2','USER11',0,'이거 접시 안깨지나요?' );

-- 댓글 신고 INSERT
INSERT INTO J_REPLY_REPORT(J_REPLY_REPORT_CODE, J_REPLY_CODE, REPLY_REPORT_TYPE_CODE, B_USER_CODE)
VALUES('J_REPR'||SEQ_J_REPLY_REP.NEXTVAL, 'J_REP1','REPRT1','USER12' );


SELECT *
FROM J_REPLY_REPORT;
-- 댓글 신고
DESC J_REPLY_REPORT;
/*
이름                     널?       유형           
---------------------- -------- ------------ 
J_REPLY_REPORT_CODE    NOT NULL VARCHAR2(20) 
J_REPLY_CODE           NOT NULL VARCHAR2(20) 
REPLY_REPORT_TYPE_CODE NOT NULL VARCHAR2(20) 
B_USER_CODE            NOT NULL VARCHAR2(20) 
SDATE                  NOT NULL DATE      
*/


-- 댓글 확인
SELECT *
FROM J_REPLY;
-- J_REP1	J_POST2		USER11	0	2020-07-14 06:40:24	이거 접시 안깨지나요?

-- 댓글 신고유형 확인
SELECT *
FROM REPLY_REPORT_TYPE;

DESC J_REPLY;
/*
J_REPLY_CODE     NOT NULL VARCHAR2(20)   
J_POST_CODE      NOT NULL VARCHAR2(20)   
J_REPLY_CODE_REF          VARCHAR2(20)   
B_USER_CODE      NOT NULL VARCHAR2(20)   
L_LEVEL          NOT NULL NUMBER(1)      
WDATE            NOT NULL DATE           
REPLY            NOT NULL VARCHAR2(4000) 
*/

SELECT *
FROM PNR_REPORT_PROC_TYPE;


-- 프로시저 테스트
EXEC PRC_J_REPLY_REPORT_PROC('J_REPR1','ADMIN1','PNRP1');

-- 데이터 확인
SELECT *
FROM WARNING;

SELECT *
FROM J_REPLY_REPORT_PROC;

CREATE OR REPLACE PROCEDURE PRC_J_REPLY_REPORT_PROC
(
  V_J_REPLY_REPORT_CODE             IN  J_REPLY_REPORT.J_REPLY_REPORT_CODE%TYPE -- 댓글 신고 코드
, V_ADMIN_CODE                      IN      ADMIN.ADMIN_CODE%TYPE-- 관리자 등록 코드
, V_PNR_REPORT_PROC_TYPE_CODE      IN    PNR_REPORT_PROC_TYPE.PNR_REPORT_PROC_TYPE_CODE%TYPE--게시물/댓글 신고처리 유형 코드

)
IS
V_J_REPLY_CODE  J_REPLY.J_REPLY_CODE%TYPE;
V_WARNING_CODE   WARNING.WARNING_CODE%TYPE := 'WAR'||SEQ_WAR.NEXTVAL;   -- 경고 내역 코드
V_B_USER_CODE   B_USER.B_USER_CODE%TYPE;    -- 유저코드

BEGIN

    
    
    -- 1. 댓글 코드 알아내기
    SELECT J_REPLY_CODE INTO V_J_REPLY_CODE
    FROM J_REPLY_REPORT
    WHERE J_REPLY_REPORT_CODE= V_J_REPLY_REPORT_CODE;
    
    -- 2. 댓글 쓴 유저 알아내기
    SELECT B_USER_CODE INTO V_B_USER_CODE
    FROM J_REPLY
    WHERE J_REPLY_CODE = V_J_REPLY_CODE;

     -- 3. 유효한 신고 일 경우
     IF (V_PNR_REPORT_PROC_TYPE_CODE = 'PNRP1')
        THEN
        -- 1. 경고 내역 등록 코드 INSERT
        INSERT INTO WARNING(WARNING_CODE, B_USER_CODE)
        VALUES(V_WARNING_CODE, V_B_USER_CODE );        
        
        -- 2. 댓글 신고처리 INSERT
        INSERT INTO J_REPLY_REPORT_PROC(J_REPLY_REPORT_PROC_CODE, J_REPLY_REPORT_CODE, ADMIN_CODE, PNR_REPORT_PROC_TYPE_CODE, WARNING_CODE)
        VALUES('J_REPRP'||SEQ_J_REPLY_REP_PRC.NEXTVAL,  V_J_REPLY_REPORT_CODE, V_ADMIN_CODE,V_PNR_REPORT_PROC_TYPE_CODE, V_WARNING_CODE);
    
    -- 3.1 허위 신고 일 경우
    ELSE
        -- 1. 댓글 신고처리 INSERT
        INSERT INTO J_REPLY_REPORT_PROC(J_REPLY_REPORT_PROC_CODE, J_REPLY_REPORT_CODE, ADMIN_CODE, PNR_REPORT_PROC_TYPE_CODE)
        VALUES('J_REPRP'||SEQ_J_REPLY_REP_PRC.NEXTVAL,  V_J_REPLY_REPORT_CODE, V_ADMIN_CODE,V_PNR_REPORT_PROC_TYPE_CODE);
     
     END IF;


END;

--=================================================================================================
-- ⑪ 자율협력 구매 출 결석 버튼 클릭 시 프로시저
-- 1. (신청,게시물등록,거래 성사 테이블,출/결석 조인 테이블)에 출/결석 insert(출결석 상태,일시 기본이 null)
CREATE OR REPLACE PROCEDURE PRC_J_ATTENDANCE
(
  V_B_USER_CODE         IN B_USER.B_USER_CODE%TYPE   -- 유저코드
, V_J_SUCCESS_CODE    IN J_SUCCESS.J_SUCCESS_CODE%TYPE -- 거래 성사 코드
, V_ATTENDANCE_STATE  IN J_ATTENDANCE.J_ATTENDANCE_CODE%TYPE -- 출/결석 상태
)
IS
BEGIN
-- J_POST,J_ATTENDANCE, J_SUCESS, J_APPLY 조인하여 INSERT
INSERT INTO(
    SELECT A.J_ATTENDANCE_CODE, A.J_SUCCESS_CODE, A.ATTENDANCE_STATE
    FROM J_ATTENDANCE A LEFT JOIN J_SUCCESS S 
    ON A.J_SUCCESS_CODE = S.J_SUCCESS_CODE
                        RIGHT JOIN J_POST P
                        ON P.J_POST_CODE = S.J_POST_CODE
                        LEFT JOIN J_APPLY L
                        ON L.J_POST_CODE =P.J_POST_CODE
                        WHERE L.B_USER_CODE = V_B_USER_CODE )
VALUES('J_ATT'||SEQ_J_ATTEND.NEXTVAL, V_J_SUCCESS_CODE, V_ATTENDANCE_STATE);


-- 커밋
-- COMMIT;

END;

--===========================================================================================


-- J_POST1,USER15번이 


SELECT *
FROM B_USER;

SELECT *
FROM JOIN;

---- 회원가입 프로시저
EXEC PRC_SIGNUP('LOC36','BANK2', 'PWFIND4', 'waterjin08', '송수진', '950830-1222222', '010-1342-3422', '서울특별시 영등포구 문래동4가 성풍빌등 4층', 'java006$','소금사막', 'sunib@naver.com', '송수진', '3023422-44-232221','물청바지', 'picture.jpg', 'G_CATE31',  'R_CATE46');
--==>PL/SQL 프로시저가 성공적으로 완료되었습니다.

-- 소상공인 신청 INSERT 문 -- 카테고리는 대분류로 받는다.
INSERT INTO SOSANG_APPLY(SOSANG_APPLY_CODE, G_CATE_CODE, B_USER_CODE, BUSINESS_NAME, BUSINESS_ADDR, BANK_COPY, BUSINESS_NUM, BUSINESS_IDENTITY)
VALUES('SOSA'|| SEQ_SOSANG.NEXTVAL, 'G_CATE1', 'USER17','수진이네', '서울특별시 영등포구 문래동4가 수진빌딩', 'BANK_COPY.jpg', '100-01-12342','BUSINESS_IDENTITY.jpg');

-- 소상공인 수락 시퀀스
CREATE SEQUENCE SEQ_SOSANG_ACC
NOCACHE;


-- 소상공인 수락 INSERT 문
INSERT INTO SOSANG_APPLY_ACCEPT(SOSANG_APPLY_ACCEPT_CODE, SOSANG_APPLY_CODE, ADMIN_CODE)
VALUES('SOSA_AC'||SEQ_SOSANG_ACC.NEXTVAL, 'SOSA3' , 'ADMIN1' );

-- 확인
SELECT *
FROM SOSANG_APPLY;

-- 확인
SELECT *
FROM SOSANG_APPLY_ACCEPT;
-- 확인
SELECT *
FROM MINUNIT_TYPE;


INSERT INTO J_POST(J_POST_CODE, B_USER_CODE, G_CATE_CODE, LOC_CODE, TITLE, CONTENT
                    , START_DATE, END_DATE, COST, DIS_COST, GOAL, MINUNIT_TYPE_CODE
                    , BUN_LOC, BUN_DATE, RETURN_DATE)
VALUES('J_POST'||SEQ_J_POST.NEXTVAL, 'USER17','G_CATE30','LOC36','접시 100장 모이면 싸게 드려요'
        ,'망했어요..! 접시가 원래 10장에 3만원인데
          묻지도 따지지도 않는 독일제 접시 입니다..
          100장이 모이면 단돈 특.별.가! 10장에![1.만.원]에
          모시고 있습니다.', TO_DATE('2020-07-14 18:00:00','YYYY-MM-DD HH24:MI:SS')
        , TO_DATE('2020-07-21 18:00:00','YYYY-MM-DD HH24:MI:SS')
        , 300000, 100000,100,'MINU3','서울특별시 영등포구 문래동4가 수진빌딩',TO_DATE('2020-07-24 18:00:00','YYYY-MM-DD HH24:MI:SS')
        ,TO_DATE('2020-07-25 18:00:00','YYYY-MM-DD HH24:MI:SS'));
        
-- 도배글 넣기
INSERT INTO J_POST(J_POST_CODE, B_USER_CODE, G_CATE_CODE, LOC_CODE, TITLE, CONTENT
                    , START_DATE, END_DATE, COST, DIS_COST, GOAL, MINUNIT_TYPE_CODE
                    , BUN_LOC, BUN_DATE, RETURN_DATE)
VALUES('J_POST'||SEQ_J_POST.NEXTVAL, 'USER17','G_CATE30','LOC36','안녕하세요 도를 믿으세요?'
        ,'안녕하세요 도를 믿으세요? ', TO_DATE('2020-07-14 18:00:00','YYYY-MM-DD HH24:MI:SS')
        , TO_DATE('2020-07-21 18:00:00','YYYY-MM-DD HH24:MI:SS')
        , 300000, 100000,100,'MINU3','서울특별시 영등포구 문래동4가 수진빌딩',TO_DATE('2020-07-24 18:00:00','YYYY-MM-DD HH24:MI:SS')
        ,TO_DATE('2020-07-25 18:00:00','YYYY-MM-DD HH24:MI:SS'));


SELECT *        
FROM J_POST;
--==>
/*
J_POST2	USER17	G_CATE30	LOC36	접시 100장 모이면 싸게 드려요	"망했어요..! 접시가 원래 10장에 3만원인데
          묻지도 따지지도 않는 독일제 접시 입니다..
          100장이 모이면 단돈 특.별.가! 10장에![1.만.원]에
          모시고 있습니다."	20/07/14	0		20/07/14	20/07/21	300000	100000	100	MINU3	서울특별시 영등포구 문래동4가 수진빌딩	20/07/24	20/07/25
*/








